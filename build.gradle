/*
 * Copyright 2020 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
}
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/version-helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/release-task-helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"

gocdPlugin {
    id = 'cd.go.gocd.gocd-database-migrator'
    pluginVersion = '2.0.0'
    name = 'GoCD Database Migrator'
    description = 'Tool to help migrator pre-20.5.0 databases to 20.5.0 database.'
    vendorName = 'GoCD Contributors'
    vendorUrl = 'https://github.com/gocd/gocd-database-migrator'

    githubRepo {
        owner = System.getenv('GITHUB_USER') ?: 'bob'
        repo = 'gocd-database-migrator'
        token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
    }

    pluginProject = project

    prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
    prereleaseDryrun = !"Yes".equalsIgnoreCase(System.getenv('PRERELEASE'))
    assetsToRelease = [project.tasks.distZip, project.tasks.distTar]

    licenseReport {
        excludeGroups = [''] // dbdeploy was licenses under LGPL until it was pulled from repos (thus having no group)
    }
}

group = 'cd.go.gocd'
version = gocdPlugin.fullVersion(project)

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.20.0'
    implementation 'org.apache.commons:commons-dbcp2:2.13.0'
    implementation 'ch.qos.logback:logback-classic:1.5.19'

    implementation 'com.beust:jcommander:1.82'
    implementation 'me.tongfei:progressbar:0.10.1'
    implementation 'org.jooq:jooq:3.16.23'

    implementation('org.liquibase:liquibase-core:5.0.0') {
        // Not needed, according to https://github.com/liquibase/liquibase/issues/1866
        exclude group: 'javax.xml.bind', module: 'jaxb-api'

        // These dependencies used to be shaded, but are now directly added. However they seem only related to use of
        // CSV or YAML snapshots/changelogs and/or offline storage which does not seem relevant to GoCD.
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'com.opencsv', module: 'opencsv'
    }
    constraints {
        implementation('org.apache.commons:commons-text:1.14.0') {
            because 'liquibase uses an outdated version'
        }
    }

    implementation ':dbdeploy:2.11.1'
    implementation 'com.mysql:mysql-connector-j:9.4.0'
    implementation 'com.h2database:h2:1.4.200' // Should match version at GoCD 20.5.0 release, since H2 dont guarantee backward compatiiblity
    implementation 'org.postgresql:postgresql:42.7.8'

    testImplementation platform('org.junit:junit-bom:6.0.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

application {
    mainClass = 'com.thoughtworks.go.dbsync.cli.Main'
    applicationDefaultJvmArgs = ['-Xmx4g']
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(['Main-Class': application.mainClass.get()])
    }
}

distributions {
    main {
        contents {
            from("LICENSE")
            from("README.md")

            from("src/main/resources/h2deltas") {
                into "h2deltas"
            }

            from("src/main/resources/pgdeltas") {
                into "pgdeltas"
            }
        }
    }
}

tasks.named("distZip") {
    dependsOn checkLicense
    eachFile { fcd ->
        fcd.path = fcd.path.substring(fcd.path.indexOf('/') + 1) // Strip off the root directory name
    }
}

tasks.named("distTar") {
    dependsOn checkLicense
    compression = Compression.GZIP
    eachFile { fcd ->
        fcd.path = fcd.path.substring(fcd.path.indexOf('/') + 1) // Strip off the root directory name
    }
}

tasks.withType(AbstractArchiveTask).configureEach { archiveTask ->
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    ['MD5', 'SHA1', 'SHA-256'].each { algo ->
        archiveTask.outputs.files("${archiveTask.archiveFile.get()}.${algo}")
        archiveTask.doLast {
            ant.checksum file: archiveTask.archiveFile.get(), format: 'MD5SUM', algorithm: algo
        }
    }
}
